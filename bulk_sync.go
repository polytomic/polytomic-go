// This file was auto-generated by Fern from our API Definition.

package polytomic

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/polytomic/polytomic-go/core"
	time "time"
)

type CreateBulkSyncRequest struct {
	Active                     *bool                  `json:"active,omitempty" url:"active,omitempty"`
	AutomaticallyAddNewFields  *BulkDiscover          `json:"automatically_add_new_fields,omitempty" url:"automatically_add_new_fields,omitempty"`
	AutomaticallyAddNewObjects *BulkDiscover          `json:"automatically_add_new_objects,omitempty" url:"automatically_add_new_objects,omitempty"`
	DataCutoffTimestamp        *time.Time             `json:"data_cutoff_timestamp,omitempty" url:"data_cutoff_timestamp,omitempty"`
	DestinationConfiguration   map[string]interface{} `json:"destination_configuration,omitempty" url:"destination_configuration,omitempty"`
	DestinationConnectionId    string                 `json:"destination_connection_id" url:"destination_connection_id"`
	DisableRecordTimestamps    *bool                  `json:"disable_record_timestamps,omitempty" url:"disable_record_timestamps,omitempty"`
	// DEPRECATED: Use automatically_add_new_objects/automatically_add_new_fields instead
	Discover       *bool         `json:"discover,omitempty" url:"discover,omitempty"`
	Mode           *SyncMode     `json:"mode,omitempty" url:"mode,omitempty"`
	Name           string        `json:"name" url:"name"`
	OrganizationId *string       `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	Policies       []string      `json:"policies,omitempty" url:"policies,omitempty"`
	Schedule       *BulkSchedule `json:"schedule,omitempty" url:"schedule,omitempty"`
	// List of schemas to sync; if omitted, all schemas will be selected for syncing.
	Schemas             []*V2CreateBulkSyncRequestSchemasItem `json:"schemas,omitempty" url:"schemas,omitempty"`
	SourceConfiguration map[string]interface{}                `json:"source_configuration,omitempty" url:"source_configuration,omitempty"`
	SourceConnectionId  string                                `json:"source_connection_id" url:"source_connection_id"`
}

func (c *CreateBulkSyncRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateBulkSyncRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*c = CreateBulkSyncRequest(body)
	return nil
}

func (c *CreateBulkSyncRequest) MarshalJSON() ([]byte, error) {
	type embed CreateBulkSyncRequest
	var marshaler = struct {
		embed
		DataCutoffTimestamp *core.DateTime `json:"data_cutoff_timestamp,omitempty"`
	}{
		embed:               embed(*c),
		DataCutoffTimestamp: core.NewOptionalDateTime(c.DataCutoffTimestamp),
	}
	return json.Marshal(marshaler)
}

type BulkSyncGetRequest struct {
	RefreshSchemas *bool `json:"-" url:"refresh_schemas,omitempty"`
}

type BulkSyncGetSourceRequest struct {
	IncludeFields *bool `json:"-" url:"include_fields,omitempty"`
}

type BulkSyncListRequest struct {
	Active *bool `json:"-" url:"active,omitempty"`
}

type BulkSyncRemoveRequest struct {
	RefreshSchemas *bool `json:"-" url:"refresh_schemas,omitempty"`
}

type StartBulkSyncRequest struct {
	FetchMode *BulkFetchMode `json:"fetch_mode,omitempty" url:"fetch_mode,omitempty"`
	Resync    *bool          `json:"resync,omitempty" url:"resync,omitempty"`
	Schemas   []string       `json:"schemas,omitempty" url:"schemas,omitempty"`
	Test      *bool          `json:"test,omitempty" url:"test,omitempty"`
}

type UpdateBulkSyncRequest struct {
	Active                     *bool                  `json:"active,omitempty" url:"active,omitempty"`
	AutomaticallyAddNewFields  *BulkDiscover          `json:"automatically_add_new_fields,omitempty" url:"automatically_add_new_fields,omitempty"`
	AutomaticallyAddNewObjects *BulkDiscover          `json:"automatically_add_new_objects,omitempty" url:"automatically_add_new_objects,omitempty"`
	DataCutoffTimestamp        *time.Time             `json:"data_cutoff_timestamp,omitempty" url:"data_cutoff_timestamp,omitempty"`
	DestinationConfiguration   map[string]interface{} `json:"destination_configuration,omitempty" url:"destination_configuration,omitempty"`
	DestinationConnectionId    string                 `json:"destination_connection_id" url:"destination_connection_id"`
	DisableRecordTimestamps    *bool                  `json:"disable_record_timestamps,omitempty" url:"disable_record_timestamps,omitempty"`
	// DEPRECATED: Use automatically_add_new_objects/automatically_add_new_fields instead
	Discover       *bool         `json:"discover,omitempty" url:"discover,omitempty"`
	Mode           *SyncMode     `json:"mode,omitempty" url:"mode,omitempty"`
	Name           string        `json:"name" url:"name"`
	OrganizationId *string       `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	Policies       []string      `json:"policies,omitempty" url:"policies,omitempty"`
	Schedule       *BulkSchedule `json:"schedule,omitempty" url:"schedule,omitempty"`
	// List of schemas to sync; if omitted, all schemas will be selected for syncing.
	Schemas             []*V2UpdateBulkSyncRequestSchemasItem `json:"schemas,omitempty" url:"schemas,omitempty"`
	SourceConfiguration map[string]interface{}                `json:"source_configuration,omitempty" url:"source_configuration,omitempty"`
	SourceConnectionId  string                                `json:"source_connection_id" url:"source_connection_id"`
}

func (u *UpdateBulkSyncRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateBulkSyncRequest
	var body unmarshaler
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	*u = UpdateBulkSyncRequest(body)
	return nil
}

func (u *UpdateBulkSyncRequest) MarshalJSON() ([]byte, error) {
	type embed UpdateBulkSyncRequest
	var marshaler = struct {
		embed
		DataCutoffTimestamp *core.DateTime `json:"data_cutoff_timestamp,omitempty"`
	}{
		embed:               embed(*u),
		DataCutoffTimestamp: core.NewOptionalDateTime(u.DataCutoffTimestamp),
	}
	return json.Marshal(marshaler)
}

type BulkDiscover string

const (
	BulkDiscoverAll                BulkDiscover = "all"
	BulkDiscoverOnlyIncremental    BulkDiscover = "onlyIncremental"
	BulkDiscoverOnlyNonIncremental BulkDiscover = "onlyNonIncremental"
	BulkDiscoverNone               BulkDiscover = "none"
)

func NewBulkDiscoverFromString(s string) (BulkDiscover, error) {
	switch s {
	case "all":
		return BulkDiscoverAll, nil
	case "onlyIncremental":
		return BulkDiscoverOnlyIncremental, nil
	case "onlyNonIncremental":
		return BulkDiscoverOnlyNonIncremental, nil
	case "none":
		return BulkDiscoverNone, nil
	}
	var t BulkDiscover
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BulkDiscover) Ptr() *BulkDiscover {
	return &b
}

type BulkItemizedSchedule struct {
	Item     BulkSelectiveMode `json:"item,omitempty" url:"item,omitempty"`
	Schedule *BulkSchedule     `json:"schedule,omitempty" url:"schedule,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkItemizedSchedule) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkItemizedSchedule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkItemizedSchedule(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkItemizedSchedule) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkMultiScheduleConfiguration struct {
	Schedules []*BulkItemizedSchedule `json:"schedules,omitempty" url:"schedules,omitempty"`
	Type      *string                 `json:"type,omitempty" url:"type,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkMultiScheduleConfiguration) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkMultiScheduleConfiguration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkMultiScheduleConfiguration(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkMultiScheduleConfiguration) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSchedule struct {
	DayOfMonth *string                         `json:"day_of_month,omitempty" url:"day_of_month,omitempty"`
	DayOfWeek  *string                         `json:"day_of_week,omitempty" url:"day_of_week,omitempty"`
	Frequency  ScheduleFrequency               `json:"frequency,omitempty" url:"frequency,omitempty"`
	Hour       *string                         `json:"hour,omitempty" url:"hour,omitempty"`
	Minute     *string                         `json:"minute,omitempty" url:"minute,omitempty"`
	Month      *string                         `json:"month,omitempty" url:"month,omitempty"`
	Multi      *BulkMultiScheduleConfiguration `json:"multi,omitempty" url:"multi,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSchedule) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkSchedule
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkSchedule(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSchedule) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSelectiveMode string

const (
	BulkSelectiveModeNone                 BulkSelectiveMode = "none"
	BulkSelectiveModeIncrementalFields    BulkSelectiveMode = "incrementalFields"
	BulkSelectiveModeNonincrementalFields BulkSelectiveMode = "nonincrementalFields"
)

func NewBulkSelectiveModeFromString(s string) (BulkSelectiveMode, error) {
	switch s {
	case "none":
		return BulkSelectiveModeNone, nil
	case "incrementalFields":
		return BulkSelectiveModeIncrementalFields, nil
	case "nonincrementalFields":
		return BulkSelectiveModeNonincrementalFields, nil
	}
	var t BulkSelectiveMode
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BulkSelectiveMode) Ptr() *BulkSelectiveMode {
	return &b
}

type BulkSyncDest struct {
	Configuration map[string]interface{} `json:"configuration,omitempty" url:"configuration,omitempty"`
	Modes         []*SupportedBulkMode   `json:"modes,omitempty" url:"modes,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncDest) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkSyncDest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkSyncDest(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncDest) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSyncDestEnvelope struct {
	Data *BulkSyncDest `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncDestEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkSyncDestEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkSyncDestEnvelope(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncDestEnvelope) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSyncListEnvelope struct {
	Data []*BulkSyncResponse `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncListEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkSyncListEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkSyncListEnvelope(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncListEnvelope) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSyncResponse struct {
	Active                     *bool         `json:"active,omitempty" url:"active,omitempty"`
	AutomaticallyAddNewFields  *BulkDiscover `json:"automatically_add_new_fields,omitempty" url:"automatically_add_new_fields,omitempty"`
	AutomaticallyAddNewObjects *BulkDiscover `json:"automatically_add_new_objects,omitempty" url:"automatically_add_new_objects,omitempty"`
	DataCutoffTimestamp        *time.Time    `json:"data_cutoff_timestamp,omitempty" url:"data_cutoff_timestamp,omitempty"`
	// Destination-specific bulk sync configuration. e.g. output schema name, s3 file format, etc.
	DestinationConfiguration map[string]interface{} `json:"destination_configuration,omitempty" url:"destination_configuration,omitempty"`
	DestinationConnectionId  *string                `json:"destination_connection_id,omitempty" url:"destination_connection_id,omitempty"`
	DisableRecordTimestamps  *bool                  `json:"disable_record_timestamps,omitempty" url:"disable_record_timestamps,omitempty"`
	// DEPRECATED: Use automatically_add_new_objects/automatically_add_new_fields instead
	Discover *bool   `json:"discover,omitempty" url:"discover,omitempty"`
	Id       *string `json:"id,omitempty" url:"id,omitempty"`
	Mode     *string `json:"mode,omitempty" url:"mode,omitempty"`
	// Name of the bulk sync
	Name           *string `json:"name,omitempty" url:"name,omitempty"`
	OrganizationId *string `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	// List of permissions policies applied to the bulk sync.
	Policies []string      `json:"policies,omitempty" url:"policies,omitempty"`
	Schedule *BulkSchedule `json:"schedule,omitempty" url:"schedule,omitempty"`
	// Source-specific bulk sync configuration. e.g. replication slot name, sync lookback, etc.
	SourceConfiguration map[string]interface{} `json:"source_configuration,omitempty" url:"source_configuration,omitempty"`
	SourceConnectionId  *string                `json:"source_connection_id,omitempty" url:"source_connection_id,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncResponse) UnmarshalJSON(data []byte) error {
	type embed BulkSyncResponse
	var unmarshaler = struct {
		embed
		DataCutoffTimestamp *core.DateTime `json:"data_cutoff_timestamp,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BulkSyncResponse(unmarshaler.embed)
	b.DataCutoffTimestamp = unmarshaler.DataCutoffTimestamp.TimePtr()
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncResponse) MarshalJSON() ([]byte, error) {
	type embed BulkSyncResponse
	var marshaler = struct {
		embed
		DataCutoffTimestamp *core.DateTime `json:"data_cutoff_timestamp,omitempty"`
	}{
		embed:               embed(*b),
		DataCutoffTimestamp: core.NewOptionalDateTime(b.DataCutoffTimestamp),
	}
	return json.Marshal(marshaler)
}

func (b *BulkSyncResponse) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSyncResponseEnvelope struct {
	Data *BulkSyncResponse `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncResponseEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkSyncResponseEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkSyncResponseEnvelope(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncResponseEnvelope) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSyncSource struct {
	Configuration interface{} `json:"configuration,omitempty" url:"configuration,omitempty"`
	Schemas       []*Schema   `json:"schemas,omitempty" url:"schemas,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncSource) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkSyncSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkSyncSource(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncSource) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSyncSourceEnvelope struct {
	Data *BulkSyncSource `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncSourceEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkSyncSourceEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkSyncSourceEnvelope(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncSourceEnvelope) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSyncStatusEnvelope struct {
	Data *BulkSyncStatusResponse `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncStatusEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkSyncStatusEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkSyncStatusEnvelope(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncStatusEnvelope) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSyncStatusResponse struct {
	CurrentExecution  *BulkSyncExecution `json:"current_execution,omitempty" url:"current_execution,omitempty"`
	LastExecution     *BulkSyncExecution `json:"last_execution,omitempty" url:"last_execution,omitempty"`
	NextExecutionTime *time.Time         `json:"next_execution_time,omitempty" url:"next_execution_time,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncStatusResponse) UnmarshalJSON(data []byte) error {
	type embed BulkSyncStatusResponse
	var unmarshaler = struct {
		embed
		NextExecutionTime *core.DateTime `json:"next_execution_time,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BulkSyncStatusResponse(unmarshaler.embed)
	b.NextExecutionTime = unmarshaler.NextExecutionTime.TimePtr()
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncStatusResponse) MarshalJSON() ([]byte, error) {
	type embed BulkSyncStatusResponse
	var marshaler = struct {
		embed
		NextExecutionTime *core.DateTime `json:"next_execution_time,omitempty"`
	}{
		embed:             embed(*b),
		NextExecutionTime: core.NewOptionalDateTime(b.NextExecutionTime),
	}
	return json.Marshal(marshaler)
}

func (b *BulkSyncStatusResponse) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type FieldConfiguration struct {
	// Whether the field is enabled for syncing.
	Enabled *bool   `json:"enabled,omitempty" url:"enabled,omitempty"`
	Id      *string `json:"id,omitempty" url:"id,omitempty"`
	// Whether the field should be obfuscated.
	Obfuscate *bool `json:"obfuscate,omitempty" url:"obfuscate,omitempty"`

	_rawJSON json.RawMessage
}

func (f *FieldConfiguration) UnmarshalJSON(data []byte) error {
	type unmarshaler FieldConfiguration
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FieldConfiguration(value)
	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FieldConfiguration) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type SchemaConfiguration struct {
	DataCutoffTimestamp *time.Time `json:"data_cutoff_timestamp,omitempty" url:"data_cutoff_timestamp,omitempty"`
	// Whether data cutoff is disabled for this schema.
	DisableDataCutoff *bool `json:"disable_data_cutoff,omitempty" url:"disable_data_cutoff,omitempty"`
	// Whether the schema is enabled for syncing.
	Enabled       *bool                              `json:"enabled,omitempty" url:"enabled,omitempty"`
	Fields        []*V2SchemaConfigurationFieldsItem `json:"fields,omitempty" url:"fields,omitempty"`
	Filters       []*BulkFilter                      `json:"filters,omitempty" url:"filters,omitempty"`
	Id            *string                            `json:"id,omitempty" url:"id,omitempty"`
	PartitionKey  *string                            `json:"partition_key,omitempty" url:"partition_key,omitempty"`
	TrackingField *string                            `json:"tracking_field,omitempty" url:"tracking_field,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SchemaConfiguration) UnmarshalJSON(data []byte) error {
	type embed SchemaConfiguration
	var unmarshaler = struct {
		embed
		DataCutoffTimestamp *core.DateTime `json:"data_cutoff_timestamp,omitempty"`
	}{
		embed: embed(*s),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*s = SchemaConfiguration(unmarshaler.embed)
	s.DataCutoffTimestamp = unmarshaler.DataCutoffTimestamp.TimePtr()
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SchemaConfiguration) MarshalJSON() ([]byte, error) {
	type embed SchemaConfiguration
	var marshaler = struct {
		embed
		DataCutoffTimestamp *core.DateTime `json:"data_cutoff_timestamp,omitempty"`
	}{
		embed:               embed(*s),
		DataCutoffTimestamp: core.NewOptionalDateTime(s.DataCutoffTimestamp),
	}
	return json.Marshal(marshaler)
}

func (s *SchemaConfiguration) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SupportedBulkMode struct {
	Description           *string   `json:"description,omitempty" url:"description,omitempty"`
	Id                    *SyncMode `json:"id,omitempty" url:"id,omitempty"`
	Label                 *string   `json:"label,omitempty" url:"label,omitempty"`
	RequiresIdentity      *bool     `json:"requires_identity,omitempty" url:"requires_identity,omitempty"`
	SupportsFieldSyncMode *bool     `json:"supports_field_sync_mode,omitempty" url:"supports_field_sync_mode,omitempty"`
	SupportsTargetFilters *bool     `json:"supports_target_filters,omitempty" url:"supports_target_filters,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SupportedBulkMode) UnmarshalJSON(data []byte) error {
	type unmarshaler SupportedBulkMode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SupportedBulkMode(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SupportedBulkMode) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type V2SchemaConfigurationFieldsItem struct {
	String             string
	FieldConfiguration *FieldConfiguration
}

func NewV2SchemaConfigurationFieldsItemFromString(value string) *V2SchemaConfigurationFieldsItem {
	return &V2SchemaConfigurationFieldsItem{String: value}
}

func NewV2SchemaConfigurationFieldsItemFromFieldConfiguration(value *FieldConfiguration) *V2SchemaConfigurationFieldsItem {
	return &V2SchemaConfigurationFieldsItem{FieldConfiguration: value}
}

func (v *V2SchemaConfigurationFieldsItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.String = valueString
		return nil
	}
	valueFieldConfiguration := new(FieldConfiguration)
	if err := json.Unmarshal(data, &valueFieldConfiguration); err == nil {
		v.FieldConfiguration = valueFieldConfiguration
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v V2SchemaConfigurationFieldsItem) MarshalJSON() ([]byte, error) {
	if v.String != "" {
		return json.Marshal(v.String)
	}
	if v.FieldConfiguration != nil {
		return json.Marshal(v.FieldConfiguration)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type V2SchemaConfigurationFieldsItemVisitor interface {
	VisitString(string) error
	VisitFieldConfiguration(*FieldConfiguration) error
}

func (v *V2SchemaConfigurationFieldsItem) Accept(visitor V2SchemaConfigurationFieldsItemVisitor) error {
	if v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.FieldConfiguration != nil {
		return visitor.VisitFieldConfiguration(v.FieldConfiguration)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type V2CreateBulkSyncRequestSchemasItem struct {
	String              string
	SchemaConfiguration *SchemaConfiguration
}

func NewV2CreateBulkSyncRequestSchemasItemFromString(value string) *V2CreateBulkSyncRequestSchemasItem {
	return &V2CreateBulkSyncRequestSchemasItem{String: value}
}

func NewV2CreateBulkSyncRequestSchemasItemFromSchemaConfiguration(value *SchemaConfiguration) *V2CreateBulkSyncRequestSchemasItem {
	return &V2CreateBulkSyncRequestSchemasItem{SchemaConfiguration: value}
}

func (v *V2CreateBulkSyncRequestSchemasItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.String = valueString
		return nil
	}
	valueSchemaConfiguration := new(SchemaConfiguration)
	if err := json.Unmarshal(data, &valueSchemaConfiguration); err == nil {
		v.SchemaConfiguration = valueSchemaConfiguration
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v V2CreateBulkSyncRequestSchemasItem) MarshalJSON() ([]byte, error) {
	if v.String != "" {
		return json.Marshal(v.String)
	}
	if v.SchemaConfiguration != nil {
		return json.Marshal(v.SchemaConfiguration)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type V2CreateBulkSyncRequestSchemasItemVisitor interface {
	VisitString(string) error
	VisitSchemaConfiguration(*SchemaConfiguration) error
}

func (v *V2CreateBulkSyncRequestSchemasItem) Accept(visitor V2CreateBulkSyncRequestSchemasItemVisitor) error {
	if v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.SchemaConfiguration != nil {
		return visitor.VisitSchemaConfiguration(v.SchemaConfiguration)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}

type V2UpdateBulkSyncRequestSchemasItem struct {
	String              string
	SchemaConfiguration *SchemaConfiguration
}

func NewV2UpdateBulkSyncRequestSchemasItemFromString(value string) *V2UpdateBulkSyncRequestSchemasItem {
	return &V2UpdateBulkSyncRequestSchemasItem{String: value}
}

func NewV2UpdateBulkSyncRequestSchemasItemFromSchemaConfiguration(value *SchemaConfiguration) *V2UpdateBulkSyncRequestSchemasItem {
	return &V2UpdateBulkSyncRequestSchemasItem{SchemaConfiguration: value}
}

func (v *V2UpdateBulkSyncRequestSchemasItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		v.String = valueString
		return nil
	}
	valueSchemaConfiguration := new(SchemaConfiguration)
	if err := json.Unmarshal(data, &valueSchemaConfiguration); err == nil {
		v.SchemaConfiguration = valueSchemaConfiguration
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, v)
}

func (v V2UpdateBulkSyncRequestSchemasItem) MarshalJSON() ([]byte, error) {
	if v.String != "" {
		return json.Marshal(v.String)
	}
	if v.SchemaConfiguration != nil {
		return json.Marshal(v.SchemaConfiguration)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", v)
}

type V2UpdateBulkSyncRequestSchemasItemVisitor interface {
	VisitString(string) error
	VisitSchemaConfiguration(*SchemaConfiguration) error
}

func (v *V2UpdateBulkSyncRequestSchemasItem) Accept(visitor V2UpdateBulkSyncRequestSchemasItemVisitor) error {
	if v.String != "" {
		return visitor.VisitString(v.String)
	}
	if v.SchemaConfiguration != nil {
		return visitor.VisitSchemaConfiguration(v.SchemaConfiguration)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", v)
}
