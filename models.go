// This file was auto-generated by Fern from our API Definition.

package polytomic

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/polytomic/polytomic-go/core"
	time "time"
)

type ModelsCreateRequest struct {
	Async *bool               `json:"-" url:"async,omitempty"`
	Body  *CreateModelRequest `json:"-" url:"-"`
}

func (m *ModelsCreateRequest) UnmarshalJSON(data []byte) error {
	body := new(CreateModelRequest)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	m.Body = body
	return nil
}

func (m *ModelsCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.Body)
}

type ModelsGetRequest struct {
	Async *bool `json:"-" url:"async,omitempty"`
}

type ModelsGetEnrichmentSourceRequest struct {
	Params map[string][]string `json:"-" url:"params,omitempty"`
}

type GetEnrichmentInputFieldsRequest struct {
	Configuration *V2EnricherConfiguration `json:"configuration,omitempty" url:"configuration,omitempty"`
}

type ModelsPreviewRequest struct {
	Async *bool               `json:"-" url:"async,omitempty"`
	Body  *CreateModelRequest `json:"-" url:"-"`
}

func (m *ModelsPreviewRequest) UnmarshalJSON(data []byte) error {
	body := new(CreateModelRequest)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	m.Body = body
	return nil
}

func (m *ModelsPreviewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(m.Body)
}

type ModelsRemoveRequest struct {
	Async *bool `json:"-" url:"async,omitempty"`
}

type ModelsSampleRequest struct {
	Async *bool `json:"-" url:"async,omitempty"`
}

type UpdateModelRequest struct {
	Async            *bool                     `json:"-" url:"async,omitempty"`
	AdditionalFields []*ModelModelFieldRequest `json:"additional_fields,omitempty" url:"additional_fields,omitempty"`
	Configuration    map[string]interface{}    `json:"configuration,omitempty" url:"configuration,omitempty"`
	ConnectionId     string                    `json:"connection_id" url:"connection_id"`
	Enricher         *Enrichment               `json:"enricher,omitempty" url:"enricher,omitempty"`
	Fields           []string                  `json:"fields,omitempty" url:"fields,omitempty"`
	Identifier       *string                   `json:"identifier,omitempty" url:"identifier,omitempty"`
	Labels           []string                  `json:"labels,omitempty" url:"labels,omitempty"`
	Name             string                    `json:"name" url:"name"`
	OrganizationId   *string                   `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	Policies         []string                  `json:"policies,omitempty" url:"policies,omitempty"`
	Refresh          *bool                     `json:"refresh,omitempty" url:"refresh,omitempty"`
	Relations        []*ModelRelation          `json:"relations,omitempty" url:"relations,omitempty"`
	TrackingColumns  []string                  `json:"tracking_columns,omitempty" url:"tracking_columns,omitempty"`
}

type CreateModelRequest struct {
	AdditionalFields []*ModelModelFieldRequest `json:"additional_fields,omitempty" url:"additional_fields,omitempty"`
	Configuration    map[string]interface{}    `json:"configuration,omitempty" url:"configuration,omitempty"`
	ConnectionId     string                    `json:"connection_id" url:"connection_id"`
	Enricher         *Enrichment               `json:"enricher,omitempty" url:"enricher,omitempty"`
	Fields           []string                  `json:"fields,omitempty" url:"fields,omitempty"`
	Identifier       *string                   `json:"identifier,omitempty" url:"identifier,omitempty"`
	Labels           []string                  `json:"labels,omitempty" url:"labels,omitempty"`
	Name             string                    `json:"name" url:"name"`
	OrganizationId   *string                   `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	Policies         []string                  `json:"policies,omitempty" url:"policies,omitempty"`
	Relations        []*ModelRelation          `json:"relations,omitempty" url:"relations,omitempty"`
	TrackingColumns  []string                  `json:"tracking_columns,omitempty" url:"tracking_columns,omitempty"`

	_rawJSON json.RawMessage
}

func (c *CreateModelRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateModelRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateModelRequest(value)
	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateModelRequest) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type LabelLabel = map[string]interface{}

type ModelListResponseEnvelope struct {
	Data []*ModelResponse `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelListResponseEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelListResponseEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelListResponseEnvelope(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelListResponseEnvelope) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelModelFieldRequest struct {
	Example *string `json:"example,omitempty" url:"example,omitempty"`
	Label   string  `json:"label" url:"label"`
	Name    string  `json:"name" url:"name"`
	Type    string  `json:"type" url:"type"`

	_rawJSON json.RawMessage
}

func (m *ModelModelFieldRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelModelFieldRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelModelFieldRequest(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelModelFieldRequest) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelRelation struct {
	From *string          `json:"from,omitempty" url:"from,omitempty"`
	To   *ModelRelationTo `json:"to,omitempty" url:"to,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelRelation) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelRelation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelRelation(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelRelation) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelRelationTo struct {
	Field   *string `json:"field,omitempty" url:"field,omitempty"`
	ModelId *string `json:"model_id,omitempty" url:"model_id,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelRelationTo) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelRelationTo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelRelationTo(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelRelationTo) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelResponse struct {
	Configuration   map[string]interface{} `json:"configuration,omitempty" url:"configuration,omitempty"`
	ConnectionId    *string                `json:"connection_id,omitempty" url:"connection_id,omitempty"`
	CreatedAt       *time.Time             `json:"created_at,omitempty" url:"created_at,omitempty"`
	CreatedBy       *CommonOutputActor     `json:"created_by,omitempty" url:"created_by,omitempty"`
	Enricher        *Enrichment            `json:"enricher,omitempty" url:"enricher,omitempty"`
	Fields          []*ModelField          `json:"fields,omitempty" url:"fields,omitempty"`
	Id              *string                `json:"id,omitempty" url:"id,omitempty"`
	Identifier      *string                `json:"identifier,omitempty" url:"identifier,omitempty"`
	Labels          []LabelLabel           `json:"labels,omitempty" url:"labels,omitempty"`
	Name            *string                `json:"name,omitempty" url:"name,omitempty"`
	OrganizationId  *string                `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	Policies        []string               `json:"policies,omitempty" url:"policies,omitempty"`
	Relations       []*Relation            `json:"relations,omitempty" url:"relations,omitempty"`
	TrackingColumns []string               `json:"tracking_columns,omitempty" url:"tracking_columns,omitempty"`
	Type            *string                `json:"type,omitempty" url:"type,omitempty"`
	UpdatedAt       *time.Time             `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	UpdatedBy       *CommonOutputActor     `json:"updated_by,omitempty" url:"updated_by,omitempty"`
	Version         *int                   `json:"version,omitempty" url:"version,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelResponse) UnmarshalJSON(data []byte) error {
	type embed ModelResponse
	var unmarshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at,omitempty"`
	}{
		embed: embed(*m),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*m = ModelResponse(unmarshaler.embed)
	m.CreatedAt = unmarshaler.CreatedAt.TimePtr()
	m.UpdatedAt = unmarshaler.UpdatedAt.TimePtr()
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelResponse) MarshalJSON() ([]byte, error) {
	type embed ModelResponse
	var marshaler = struct {
		embed
		CreatedAt *core.DateTime `json:"created_at,omitempty"`
		UpdatedAt *core.DateTime `json:"updated_at,omitempty"`
	}{
		embed:     embed(*m),
		CreatedAt: core.NewOptionalDateTime(m.CreatedAt),
		UpdatedAt: core.NewOptionalDateTime(m.UpdatedAt),
	}
	return json.Marshal(marshaler)
}

func (m *ModelResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelResponseEnvelope struct {
	Data *ModelResponse `json:"data,omitempty" url:"data,omitempty"`
	Job  *JobResponse   `json:"job,omitempty" url:"job,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelResponseEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelResponseEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelResponseEnvelope(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelResponseEnvelope) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelSample struct {
	Records  []V2SampleRecord `json:"records,omitempty" url:"records,omitempty"`
	Warnings []string         `json:"warnings,omitempty" url:"warnings,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelSample) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelSample
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelSample(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelSample) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ModelSampleResponseEnvelope struct {
	Data *ModelSample `json:"data,omitempty" url:"data,omitempty"`
	Job  *JobResponse `json:"job,omitempty" url:"job,omitempty"`

	_rawJSON json.RawMessage
}

func (m *ModelSampleResponseEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler ModelSampleResponseEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = ModelSampleResponseEnvelope(value)
	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *ModelSampleResponseEnvelope) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type Relation struct {
	From *string     `json:"from,omitempty" url:"from,omitempty"`
	To   *RelationTo `json:"to,omitempty" url:"to,omitempty"`

	_rawJSON json.RawMessage
}

func (r *Relation) UnmarshalJSON(data []byte) error {
	type unmarshaler Relation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = Relation(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *Relation) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RelationTo struct {
	Field   *string `json:"field,omitempty" url:"field,omitempty"`
	ModelId *string `json:"model_id,omitempty" url:"model_id,omitempty"`

	_rawJSON json.RawMessage
}

func (r *RelationTo) UnmarshalJSON(data []byte) error {
	type unmarshaler RelationTo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RelationTo(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RelationTo) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type V2GetEnrichmentInputFieldsResponseEnvelope struct {
	Data [][]string `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (v *V2GetEnrichmentInputFieldsResponseEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler V2GetEnrichmentInputFieldsResponseEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*v = V2GetEnrichmentInputFieldsResponseEnvelope(value)
	v._rawJSON = json.RawMessage(data)
	return nil
}

func (v *V2GetEnrichmentInputFieldsResponseEnvelope) String() string {
	if len(v._rawJSON) > 0 {
		if value, err := core.StringifyJSON(v._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(v); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", v)
}

// A map of `fieldSource` -> `fieldName: fieldValue`. Because there may be field name conflicts between the base model and enrichments, the base model fields are placed in a map under the model ID. Fields from enrichments are placed under the enricher ID.
type V2SampleRecord = map[string]map[string]interface{}
