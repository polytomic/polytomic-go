// This file was auto-generated by Fern from our API Definition.

package polytomic

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/polytomic/polytomic-go/core"
	time "time"
)

type BulkSyncSourceSchemaEnvelope struct {
	Data *Schema `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncSourceSchemaEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkSyncSourceSchemaEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkSyncSourceSchemaEnvelope(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncSourceSchemaEnvelope) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSyncSourceStatus struct {
	CacheStatus         *string    `json:"cache_status,omitempty" url:"cache_status,omitempty"`
	LastRefreshFinished *time.Time `json:"last_refresh_finished,omitempty" url:"last_refresh_finished,omitempty"`
	LastRefreshStarted  *time.Time `json:"last_refresh_started,omitempty" url:"last_refresh_started,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncSourceStatus) UnmarshalJSON(data []byte) error {
	type embed BulkSyncSourceStatus
	var unmarshaler = struct {
		embed
		LastRefreshFinished *core.DateTime `json:"last_refresh_finished,omitempty"`
		LastRefreshStarted  *core.DateTime `json:"last_refresh_started,omitempty"`
	}{
		embed: embed(*b),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*b = BulkSyncSourceStatus(unmarshaler.embed)
	b.LastRefreshFinished = unmarshaler.LastRefreshFinished.TimePtr()
	b.LastRefreshStarted = unmarshaler.LastRefreshStarted.TimePtr()
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncSourceStatus) MarshalJSON() ([]byte, error) {
	type embed BulkSyncSourceStatus
	var marshaler = struct {
		embed
		LastRefreshFinished *core.DateTime `json:"last_refresh_finished,omitempty"`
		LastRefreshStarted  *core.DateTime `json:"last_refresh_started,omitempty"`
	}{
		embed:               embed(*b),
		LastRefreshFinished: core.NewOptionalDateTime(b.LastRefreshFinished),
		LastRefreshStarted:  core.NewOptionalDateTime(b.LastRefreshStarted),
	}
	return json.Marshal(marshaler)
}

func (b *BulkSyncSourceStatus) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BulkSyncSourceStatusEnvelope struct {
	Data *BulkSyncSourceStatus `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (b *BulkSyncSourceStatusEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler BulkSyncSourceStatusEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BulkSyncSourceStatusEnvelope(value)
	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BulkSyncSourceStatusEnvelope) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type SchemaRecordsResponseEnvelope struct {
	Data []map[string]interface{} `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (s *SchemaRecordsResponseEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler SchemaRecordsResponseEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SchemaRecordsResponseEnvelope(value)
	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SchemaRecordsResponseEnvelope) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
