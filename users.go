// This file was auto-generated by Fern from our API Definition.

package polytomic

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/polytomic/polytomic-go/core"
)

type CreateUserRequestSchema struct {
	Email string  `json:"email" url:"email"`
	Role  *string `json:"role,omitempty" url:"role,omitempty"`
}

type UsersCreateApiKeyRequest struct {
	Force *bool `json:"-" url:"force,omitempty"`
}

type UpdateUserRequestSchema struct {
	Email string  `json:"email" url:"email"`
	Role  *string `json:"role,omitempty" url:"role,omitempty"`
}

type ApiKeyResponse struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ApiKeyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiKeyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiKeyResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiKeyResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ApiKeyResponseEnvelope struct {
	Data *ApiKeyResponse `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (a *ApiKeyResponseEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler ApiKeyResponseEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = ApiKeyResponseEnvelope(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *ApiKeyResponseEnvelope) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type ListUsersEnvelope struct {
	Data []*User `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListUsersEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler ListUsersEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListUsersEnvelope(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListUsersEnvelope) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type User struct {
	Email          *string `json:"email,omitempty" url:"email,omitempty"`
	Id             *string `json:"id,omitempty" url:"id,omitempty"`
	OrganizationId *string `json:"organization_id,omitempty" url:"organization_id,omitempty"`
	Role           *string `json:"role,omitempty" url:"role,omitempty"`

	_rawJSON json.RawMessage
}

func (u *User) UnmarshalJSON(data []byte) error {
	type unmarshaler User
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = User(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *User) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserEnvelope struct {
	Data *User `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UserEnvelope) UnmarshalJSON(data []byte) error {
	type unmarshaler UserEnvelope
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserEnvelope(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserEnvelope) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
